1. Use `unkown` for a type you plan to narrow later (or for just equality & boolean ops like ===, ||, etc.)
2. Typescript can infer _specific types_ like true or false, not just boolean: These are called _type literals_.
3. Typescript supports numeric separators like: let oneMillion = 1_000_000 // Equivalent to 1000000
4. A key like `[anyname: string]: number` is an _index signature_ that allows any number of keys that follow the pattern ( http://www.typescriptlang.org/play/index.html#code/DYUwLgBADghgznEA7A5iATgGQJZzALggG8AoCCAM2GxQAsCI91tUAaMidEAEwFEBPEAH5CAIwD240DCTtyAbUQwwAOQCuAW1EZCSTdvQBdQkxYoSAXwgBeYpWp0GAcgDMARhcAmJ6whuADIROtNhOEFZAA
)
5. You can mark fields as "assignable only at creation" by `readonly keyName: type` in the type description
6. You can mark fields as "optional" (i.e. the key may not be there and if it is, it may be undefined) by `keyName?: type`
7. Four ways to declare objects in Typescript
  A) By shape `{a: string}`
  B) Empty literal `{}` //Don't - it's unpredictable
  C) The type `object` //When you don't care what fields it has, only that it is an object
  D) The type `Object` //Don't - it's unpredictable
8. A Type Alias is block-scoped, like `let` and `const`: Inside blocks, a `type` will shadow another `type` of the same name outside.
9. Arrays consisting of one type alias can be declared by `myType[]`
10. Aliased arrays can be declared by `Array<myType>` or `myType[]`
11. Inferred arrays declared as "any" by `[]` adjust their types as they are `push`d to inside the scope where they are defined.
12. _Tuples_ are grainier Arrays where ordinal types can be aliased by `[number, string, ...number[]]`
13. Readonly arrays and tuples can use non-mutating methods like `.slice` but not `.push`,`.splice`, etc.
14. _void_ is the return type for a function that doesn't return anything, _never_ is the return type for a function that never returns (e.g. runs in a loop)
15. If TSC option `strictNullCheck` is false, anything can be set to `null` (bad)
16. _Enums_ allow several values known at compile time to be referenced by 1 type. Individual values are accessed by `myEnum.thingA`
17. _const enum_s can only be accessed via string literals, normal enums can be accessed by ordinals
18. In function calls _optional parameters_ have to occur at the end of the list of parameters
19. Prefer _default parameters_ `(a = 'a', b = 'b')` over _optional parameters_
20. You can type-annotate `this` in a function by prefixing it's special TS keyword (`this`) at the beginning of the parameters list
21. Iterators are annotated by the TS built-in `IterableIterator` and can be used like `IterableIterator<number>`
22. `Type-level` code is code that exists to express type information (as a rule of thumb, if it's not valid JS, it's `Type-level`)
23. Type-annotate function _call signatures_ by using the following syntax: `type Log = (message: string, userId?: string) => void`
24. Prefer specific type annotations in overloaded function signatures (e.g. Date over any, Date | string over any), to make the typing stronger and the function easier to implement
25. Function declarations cannot be signature-checked like expression assignments
26. Always include an "any" case when overloading function signatures
27. A _Generic Type Parameter_ is: "A placeholder type used to enforce a type-level constraint in multiple places. Also known as polymorphic type parameter."
28. The angle brackets `<>` indicate the scope of the Generic Parameter
29. Generics seem useful for getting Typescript to STFU inside functions
30. You can bind generic parameters to method signatures (where each call will infer T), or "higher" on the type itself 
  as a _generic type alias_ like `MyType<T> = {(x: T[]): T[]}; let y: MyType<string> = //...`
31. You have to annotate Promise generic parameters to use the .then result: "new Promise<number>(resolve //..."
32. Bounded Polymorphism (<U extends T>) is a good way to share some of the responsibility with the client of the function
33. The _private_ access modifier in a constructor `private myprop: MyType` automatically assigns the parameter to this and sets its visibility to private,
  meaning that code within the instance can read and write to it, but code outside can’t.
34. _protected_ is like _private_ but can be accessed by subclasses, too
35. _abstract_ keyword on class makes it so you can't instantiate, but you can define methods etc. for subclasses (like C#)
36. _abstract_ on method means subclasses must implement
37. _interfaces_ are like types, with 3 diffs:
  1) right-hand must be a shape (no literals)
  2) Interfaces are stricter when extending (error over combination)
  3) Interfaces with the same name in the same scope are merged ( _declaration merging_ )
38. _implements_ keyword on a class guarantees the class satisfies the interface
39. As long as Poodle is assignable to Zebra, TypeScript is OK with it because from our function’s point of view, the two are interchangeable; all that matters is that they implement .trot
 
